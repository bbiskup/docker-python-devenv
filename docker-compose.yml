# Adapted from https://github.com/puckel/docker-airflow/

# This is only an example. The container relevant for illustrating how
# to use Python/Docker in development is proj_container at
# the bottom.

mysql:
    image: mysql
    restart: always
    ports:
        - "3306:3306"
    environment:
        - MYSQL_RANDOM_ROOT_PASSWORD=true
        - MYSQL_USER=airflow
        - MYSQL_PASSWORD=airflow
        - MYSQL_DATABASE=airflow

rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
        - "15672:15672"
        - "5672:5672"
    environment:
        - RABBITMQ_DEFAULT_USER=airflow
        - RABBITMQ_DEFAULT_PASS=airflow
        - RABBITMQ_DEFAULT_VHOST=airflow

webserver:
    # image: puckel/docker-airflow
    build: .
    restart: always
    # volumes:
    #     - /localpath/to/dags:/usr/local/airflow/dags
    environment:
        - AIRFLOW_HOME=/usr/local/airflow
    ports:
        - "8080:8080"
    links:
        - mysql:mysql
        - rabbitmq:rabbitmq
        - worker:worker
        - scheduler:scheduler
    command: webserver

flower:
    # image: puckel/docker-airflow
    build: .
    restart: always
    environment:
        - AIRFLOW_HOME=/usr/local/airflow
    ports:
        - "5555:5555"
    links:
        - rabbitmq:rabbitmq
    command: flower

scheduler:
    # image: puckel/docker-airflow
    build: .
    restart: always
    # volumes:
    #     - /localpath/to/dags:/usr/local/airflow/dags
    environment:
        - AIRFLOW_HOME=/usr/local/airflow
    links:
        - mysql:mysql
        - rabbitmq:rabbitmq
    command: scheduler

worker:
    # image: puckel/docker-airflow
    build: .
    restart: always
    # volumes:
    #     - /localpath/to/dags:/usr/local/airflow/dags
    environment:
        - AIRFLOW_HOME=/usr/local/airflow
    ports:
        - "8793:8793"
    links:
        - mysql:mysql
        - rabbitmq:rabbitmq
    command: worker

# This is the project-specific container for running one-off commands
proj_container:
    build: .
    volumes:
      # Make local code available.
      # Extra benefit: shell path completion works in local shell
      - ./pkg1:/usr/local/airflow/pkg1
      - ./setup.py:/usr/local/airflow/setup.py
      - ./tests:/usr/local/airflow/tests
    entrypoint:
     # This allows to run any commands in bash.
     # Caveat: the command and its arguments must be enclosed
     # in parentheses.
     # e.g. 
     # docker-compose run proj_container "pip freeze".
     # use the script ./dockercmd.sh to avoid this
     - /bin/bash
     - -c